package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/mike-jacks/codecamp-2024-short-video-distributor-backend/graph/model"
)

// Empty is the resolver for the _empty field.
func (r *mutationResolver) Empty(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Empty - _empty"))
}

// Authorize is the resolver for the authorize field.
func (r *mutationResolver) Authorize(ctx context.Context, platformType model.PlatformType, code string) (bool, error) {
	userID := ctx.Value("user_id").(string)
	if userID == "" {
		userID = "test-user-id"
	}

	switch platformType {
	case model.PlatformTypeYoutube:
		_, err := r.youtubeService.ExchangeAndSaveToken(ctx, code, userID)
		return err == nil, nil
	default:
		return false, fmt.Errorf("unsupported platform type: %s", platformType)
	}
}

// RevokeAuth is the resolver for the revokeAuth field.
func (r *mutationResolver) RevokeAuth(ctx context.Context, platformType model.PlatformType) (bool, error) {
	panic(fmt.Errorf("not implemented: RevokeAuth - revokeAuth"))
}

// UploadVideo is the resolver for the uploadVideo field.
func (r *mutationResolver) UploadVideo(ctx context.Context, platformType model.PlatformType, file graphql.Upload, title string, description string) (*model.Video, error) {
	panic(fmt.Errorf("not implemented: UploadVideo - uploadVideo"))
}

// Empty is the resolver for the _empty field.
func (r *queryResolver) Empty(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Empty - _empty"))
}

// GetAuthURL is the resolver for the getAuthURL field.
func (r *queryResolver) GetAuthURL(ctx context.Context, platformType model.PlatformType) (string, error) {
	switch platformType {
	case model.PlatformTypeYoutube:
		return r.youtubeService.GetAuthURL(), nil
	default:
		return "", fmt.Errorf("unsupported platform type: %s", platformType)
	}
}

// GetPlatformCredentials is the resolver for the getPlatformCredentials field.
func (r *queryResolver) GetPlatformCredentials(ctx context.Context, platformType model.PlatformType) (*model.PlatformCredentials, error) {
	if r.youtubeService == nil {
		return nil, fmt.Errorf("youtube service not initialized")
	}

	// TODO: Get real userID from context after implementing authentication
	userID := "test-user"

	switch platformType {
	case model.PlatformTypeYoutube:
		creds, err := r.youtubeService.GetActiveCredentials(ctx, userID)
		if err != nil {
			return nil, fmt.Errorf("failed to get YouTube credentials: %w", err)
		}
		return creds, nil
	case model.PlatformTypeTiktok:
		return nil, fmt.Errorf("TikTok not implemented yet")
	case model.PlatformTypeInstagram:
		return nil, fmt.Errorf("instagram not implemented yet")
	default:
		return nil, fmt.Errorf("unsupported platform type: %s", platformType)
	}
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
